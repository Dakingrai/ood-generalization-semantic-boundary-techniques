/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.interactions;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.service.*;
import com.facebook.swift.transport.client.*;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.util.*;

@SwiftGenerated
@com.facebook.swift.service.ThriftService("MyService")
public interface MyService extends java.io.Closeable {
    @com.facebook.swift.service.ThriftService("MyService")
    public interface Async extends java.io.Closeable {
        @java.lang.Override void close();

        @ThriftMethod(value = "foo")
        ListenableFuture<Void> foo();

        default ListenableFuture<Void> foo(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<Void>> fooWrapper(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }
        public class MyInteraction implements java.io.Closeable {
            ListenableFuture<Integer> frobnicate() {
                throw new UnsupportedOperationException();
            }
            ListenableFuture<Void> ping() {
                throw new UnsupportedOperationException();
            }

            @java.lang.Override
            public void close() {}
        }

        default public MyInteraction createMyInteraction() {
            return new MyInteraction();
        }

        public class MyInteractionFast implements java.io.Closeable {
            ListenableFuture<Integer> frobnicate() {
                throw new UnsupportedOperationException();
            }
            ListenableFuture<Void> ping() {
                throw new UnsupportedOperationException();
            }

            @java.lang.Override
            public void close() {}
        }

        default public MyInteractionFast createMyInteractionFast() {
            return new MyInteractionFast();
        }

        public class SerialInteraction implements java.io.Closeable {
            ListenableFuture<Void> frobnicate() {
                throw new UnsupportedOperationException();
            }

            @java.lang.Override
            public void close() {}
        }

        default public SerialInteraction createSerialInteraction() {
            return new SerialInteraction();
        }
    }
    @java.lang.Override void close();

    @ThriftMethod(value = "foo")
    void foo() throws org.apache.thrift.TException;

    default void foo(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<Void> fooWrapper(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @com.facebook.swift.service.ThriftService("MyService")
    interface Reactive extends reactor.core.Disposable {
        @ThriftMethod(value = "foo")
        reactor.core.publisher.Mono<Void> foo();

        default reactor.core.publisher.Mono<Void> foo(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<Void>> fooWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        public class MyInteraction implements reactor.core.Disposable {
            ListenableFuture<Integer> frobnicate() {
                throw new UnsupportedOperationException();
            }
            ListenableFuture<Void> ping() {
                throw new UnsupportedOperationException();
            }

            @java.lang.Override
            public void dispose() {}
        }

        default public MyInteraction createMyInteraction() {
            return new MyInteraction();
        }

        public class MyInteractionFast implements reactor.core.Disposable {
            ListenableFuture<Integer> frobnicate() {
                throw new UnsupportedOperationException();
            }
            ListenableFuture<Void> ping() {
                throw new UnsupportedOperationException();
            }

            @java.lang.Override
            public void dispose() {}
        }

        default public MyInteractionFast createMyInteractionFast() {
            return new MyInteractionFast();
        }

        public class SerialInteraction implements reactor.core.Disposable {
            ListenableFuture<Void> frobnicate() {
                throw new UnsupportedOperationException();
            }

            @java.lang.Override
            public void dispose() {}
        }

        default public SerialInteraction createSerialInteraction() {
            return new SerialInteraction();
        }
    }
    public class MyInteraction implements java.io.Closeable {
        int frobnicate() throws org.apache.thrift.TException {
            throw new UnsupportedOperationException();
        }
        void ping() throws org.apache.thrift.TException {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public void close() {}
    }

    default public MyInteraction createMyInteraction() {
        return new MyInteraction();
    }

    public class MyInteractionFast implements java.io.Closeable {
        int frobnicate() throws org.apache.thrift.TException {
            throw new UnsupportedOperationException();
        }
        void ping() throws org.apache.thrift.TException {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public void close() {}
    }

    default public MyInteractionFast createMyInteractionFast() {
        return new MyInteractionFast();
    }

    public class SerialInteraction implements java.io.Closeable {
        void frobnicate() throws org.apache.thrift.TException {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public void close() {}
    }

    default public SerialInteraction createSerialInteraction() {
        return new SerialInteraction();
    }
}
