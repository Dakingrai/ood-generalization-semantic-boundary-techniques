/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.basicannotations;

import java.util.*;

public class MyServicePrioParentReactiveAsyncWrapper 
  implements MyServicePrioParent.Async {
  private MyServicePrioParent.Reactive _delegate;

  public MyServicePrioParentReactiveAsyncWrapper(MyServicePrioParent.Reactive _delegate) {
    
    this._delegate = _delegate;
  }

  public MyServicePrioParentReactiveAsyncWrapper(org.apache.thrift.ProtocolId _protocolId, reactor.core.publisher.Mono<? extends com.facebook.swift.transport.client.RpcClient> _rpcClient, Map<String, String> _headers, Map<String, String> _persistentHeaders) {
    this(new MyServicePrioParentReactiveClient(_protocolId, _rpcClient, _headers, _persistentHeaders));
  }

  @java.lang.Override
  public void close() {
    _delegate.dispose();
  }

  @java.lang.Override
  public com.google.common.util.concurrent.ListenableFuture<Void> ping() {
      return com.facebook.swift.transport.util.FutureUtil.toListenableFuture(_delegate.ping());
  }

  @java.lang.Override
  public com.google.common.util.concurrent.ListenableFuture<Void> ping(
    com.facebook.swift.transport.client.RpcOptions rpcOptions) {
      return com.facebook.swift.transport.util.FutureUtil.toListenableFuture(_delegate.ping( rpcOptions));
  }

  @java.lang.Override
  public com.google.common.util.concurrent.ListenableFuture<com.facebook.swift.transport.client.ResponseWrapper<Void>> pingWrapper(
    com.facebook.swift.transport.client.RpcOptions rpcOptions) {
    return com.facebook.swift.transport.util.FutureUtil.toListenableFuture(_delegate.pingWrapper( rpcOptions));
  }

  @java.lang.Override
  public com.google.common.util.concurrent.ListenableFuture<Void> pong() {
      return com.facebook.swift.transport.util.FutureUtil.toListenableFuture(_delegate.pong());
  }

  @java.lang.Override
  public com.google.common.util.concurrent.ListenableFuture<Void> pong(
    com.facebook.swift.transport.client.RpcOptions rpcOptions) {
      return com.facebook.swift.transport.util.FutureUtil.toListenableFuture(_delegate.pong( rpcOptions));
  }

  @java.lang.Override
  public com.google.common.util.concurrent.ListenableFuture<com.facebook.swift.transport.client.ResponseWrapper<Void>> pongWrapper(
    com.facebook.swift.transport.client.RpcOptions rpcOptions) {
    return com.facebook.swift.transport.util.FutureUtil.toListenableFuture(_delegate.pongWrapper( rpcOptions));
  }

}
