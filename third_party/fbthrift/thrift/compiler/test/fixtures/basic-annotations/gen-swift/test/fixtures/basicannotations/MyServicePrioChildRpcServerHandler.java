/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.basicannotations;

import java.util.*;
import org.apache.thrift.protocol.*;

public class MyServicePrioChildRpcServerHandler  extends test.fixtures.basicannotations.MyServicePrioParentRpcServerHandler
  implements com.facebook.swift.transport.server.RpcServerHandler {

  private final java.util.Map<String, com.facebook.swift.transport.server.RpcServerHandler> _methodMap;

  private final MyServicePrioChild.Reactive _delegate;

  private final java.util.List<com.facebook.swift.transport.payload.Reader> _pangReaders;

  private final java.util.List<com.facebook.swift.service.ThriftEventHandler> _eventHandlers;

  public MyServicePrioChildRpcServerHandler(MyServicePrioChild _delegate,
                                    java.util.List<com.facebook.swift.service.ThriftEventHandler> _eventHandlers,
                                    reactor.core.scheduler.Scheduler _scheduler) {
    this(new MyServicePrioChildBlockingReactiveWrapper(_delegate, _scheduler), _eventHandlers);
  }

  public MyServicePrioChildRpcServerHandler(MyServicePrioChild.Async _delegate,
                                    java.util.List<com.facebook.swift.service.ThriftEventHandler> _eventHandlers) {
    this(new MyServicePrioChildAsyncReactiveWrapper(_delegate), _eventHandlers);
  }

  public MyServicePrioChildRpcServerHandler(MyServicePrioChild.Reactive _delegate,
                                    java.util.List<com.facebook.swift.service.ThriftEventHandler> _eventHandlers) {
    super(_delegate, _eventHandlers);
    this._methodMap = new java.util.HashMap<>();
    this._delegate = _delegate;
    this._eventHandlers = _eventHandlers;

    _methodMap.put("pang", this);
    _pangReaders = _createpangReaders();

  }

  private static java.util.List<com.facebook.swift.transport.payload.Reader> _createpangReaders() {
    java.util.List<com.facebook.swift.transport.payload.Reader> _readerList = new java.util.ArrayList<>();


    return _readerList;
  }

  private static com.facebook.swift.transport.payload.Writer _createpangWriter(
      final Object _r,
      final com.facebook.swift.service.ContextChain _chain,
      final int _seqId) {
      return oprot -> {
      try {
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pang", TMessageType.REPLY, _seqId));
        oprot.writeStructBegin(com.facebook.swift.transport.util.GeneratedUtil.TSTRUCT);

        

        oprot.writeFieldBegin(com.facebook.swift.transport.util.GeneratedUtil.VOID_FIELD);


        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
        oprot.writeMessageEnd();

        _chain.postWrite(_r);
      } catch (Throwable _e) {
        throw reactor.core.Exceptions.propagate(_e);
      }
    };
  }

  private static reactor.core.publisher.Mono<com.facebook.swift.transport.payload.ServerResponsePayload>
    _dopang(
    MyServicePrioChild.Reactive _delegate,
    String _name,
    com.facebook.swift.transport.payload.ServerRequestPayload _payload,
    java.util.List<com.facebook.swift.transport.payload.Reader> _readers,
    java.util.List<com.facebook.swift.service.ThriftEventHandler> _eventHandlers) {
    final com.facebook.swift.service.ContextChain _chain = new com.facebook.swift.service.ContextChain(_eventHandlers, _name, _payload.getRequestContext());
          _chain.preRead();
          java.util.List<Object>_data = _payload.getData(_readers);
          java.util.Iterator<Object> _iterator = _data.iterator();


          _chain.postRead(_data);

          return _delegate
            .pang()
            .map(_response -> {
              _chain.preWrite(_response);
                com.facebook.swift.transport.payload.ServerResponsePayload _serverResponsePayload =
                    com.facebook.swift.transport.util.GeneratedUtil.createServerResponsePayload(
                        _payload,
                        _createpangWriter(_response, _chain, _payload.getMessageSeqId()));

                return _serverResponsePayload;
            })
            .<com.facebook.swift.transport.payload.ServerResponsePayload>onErrorResume(_t -> {
                _chain.preWriteException(_t);
                com.facebook.swift.transport.payload.Writer _exceptionWriter = null;

                com.facebook.swift.transport.payload.ServerResponsePayload _serverResponsePayload =
                    com.facebook.swift.transport.util.GeneratedUtil.createServerResponsePayload(
                        _payload,
                        _exceptionWriter);

                return reactor.core.publisher.Mono.just(_serverResponsePayload);
            });
  }

  @Override
  public reactor.core.publisher.Mono<com.facebook.swift.transport.payload.ServerResponsePayload> singleRequestSingleResponse(com.facebook.swift.transport.payload.ServerRequestPayload _payload) {
    final String _name = _payload.getRequestRpcMetadata().getName();

    reactor.core.publisher.Mono<com.facebook.swift.transport.payload.ServerResponsePayload> _result;
    try {
      switch (_name) {
        case "pang":
          _result = _dopang(_delegate, _name, _payload, _pangReaders, _eventHandlers);
        break;
        default: {
          _result =  super.singleRequestSingleResponse(_payload);
        }
      }
    } catch (Throwable _t) {
      _result = reactor.core.publisher.Mono.error(_t);
    }

    return _result;
  }

  public java.util.Map<String, com.facebook.swift.transport.server.RpcServerHandler> getMethodMap() {
      java.util.Map<String, com.facebook.swift.transport.server.RpcServerHandler> _combined = new java.util.HashMap();
      _combined.putAll(_methodMap);
      _combined.putAll(super.getMethodMap());
      return _combined;
  }

}
