#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import folly.iobuf as _fbthrift_iobuf
import typing as _typing
from thrift.py3.server import RequestContext, ServiceInterface
from abc import abstractmethod, ABCMeta

import module.types as _module_types

_PubSubStreamingServiceInterfaceT = _typing.TypeVar('_PubSubStreamingServiceInterfaceT', bound='PubSubStreamingServiceInterface')


class PubSubStreamingServiceInterface(
    ServiceInterface,
    metaclass=ABCMeta,
):

    @staticmethod
    def pass_context_returnstream(
        fn: _typing.Callable[
                [_PubSubStreamingServiceInterfaceT, RequestContext, int, int],
                _typing.Coroutine[_typing.Any, _typing.Any, _module_types.ServerStream__i32]
        ]
    ) -> _typing.Callable[
        [_PubSubStreamingServiceInterfaceT, int, int],
        _typing.Coroutine[_typing.Any, _typing.Any, _module_types.ServerStream__i32]
    ]: ...

    @abstractmethod
    async def returnstream(
        self,
        i32_from: int,
        i32_to: int
    ) -> _module_types.ServerStream__i32: ...

    @staticmethod
    def pass_context_streamthrows(
        fn: _typing.Callable[
                [_PubSubStreamingServiceInterfaceT, RequestContext, int],
                _typing.Coroutine[_typing.Any, _typing.Any, _module_types.ServerStream__i32]
        ]
    ) -> _typing.Callable[
        [_PubSubStreamingServiceInterfaceT, int],
        _typing.Coroutine[_typing.Any, _typing.Any, _module_types.ServerStream__i32]
    ]: ...

    @abstractmethod
    async def streamthrows(
        self,
        foo: int
    ) -> _module_types.ServerStream__i32: ...

    @staticmethod
    def pass_context_boththrows(
        fn: _typing.Callable[
                [_PubSubStreamingServiceInterfaceT, RequestContext, int],
                _typing.Coroutine[_typing.Any, _typing.Any, _module_types.ServerStream__i32]
        ]
    ) -> _typing.Callable[
        [_PubSubStreamingServiceInterfaceT, int],
        _typing.Coroutine[_typing.Any, _typing.Any, _module_types.ServerStream__i32]
    ]: ...

    @abstractmethod
    async def boththrows(
        self,
        foo: int
    ) -> _module_types.ServerStream__i32: ...

    @staticmethod
    def pass_context_responseandstreamthrows(
        fn: _typing.Callable[
                [_PubSubStreamingServiceInterfaceT, RequestContext, int],
                _typing.Coroutine[_typing.Any, _typing.Any, _module_types.ResponseAndServerStream__i32_i32]
        ]
    ) -> _typing.Callable[
        [_PubSubStreamingServiceInterfaceT, int],
        _typing.Coroutine[_typing.Any, _typing.Any, _module_types.ResponseAndServerStream__i32_i32]
    ]: ...

    @abstractmethod
    async def responseandstreamthrows(
        self,
        foo: int
    ) -> _module_types.ResponseAndServerStream__i32_i32: ...

    @staticmethod
    def pass_context_returnstreamFast(
        fn: _typing.Callable[
                [_PubSubStreamingServiceInterfaceT, RequestContext, int, int],
                _typing.Coroutine[_typing.Any, _typing.Any, _module_types.ServerStream__i32]
        ]
    ) -> _typing.Callable[
        [_PubSubStreamingServiceInterfaceT, int, int],
        _typing.Coroutine[_typing.Any, _typing.Any, _module_types.ServerStream__i32]
    ]: ...

    @abstractmethod
    async def returnstreamFast(
        self,
        i32_from: int,
        i32_to: int
    ) -> _module_types.ServerStream__i32: ...
    pass


