/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.adapter;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Bar implements TBase, java.io.Serializable, Cloneable, Comparable<Bar> {
  private static final TStruct STRUCT_DESC = new TStruct("Bar");
  private static final TField STRUCT_FIELD_FIELD_DESC = new TField("structField", TType.STRUCT, (short)1);
  private static final TField OPTIONAL_STRUCT_FIELD_FIELD_DESC = new TField("optionalStructField", TType.STRUCT, (short)2);
  private static final TField STRUCT_LIST_FIELD_FIELD_DESC = new TField("structListField", TType.LIST, (short)3);
  private static final TField OPTIONAL_STRUCT_LIST_FIELD_FIELD_DESC = new TField("optionalStructListField", TType.LIST, (short)4);

  public Foo structField;
  public Foo optionalStructField;
  public List<Foo> structListField;
  public List<Foo> optionalStructListField;
  public static final int STRUCTFIELD = 1;
  public static final int OPTIONALSTRUCTFIELD = 2;
  public static final int STRUCTLISTFIELD = 3;
  public static final int OPTIONALSTRUCTLISTFIELD = 4;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(STRUCTFIELD, new FieldMetaData("structField", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Foo.class)));
    tmpMetaDataMap.put(OPTIONALSTRUCTFIELD, new FieldMetaData("optionalStructField", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, Foo.class)));
    tmpMetaDataMap.put(STRUCTLISTFIELD, new FieldMetaData("structListField", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Foo.class))));
    tmpMetaDataMap.put(OPTIONALSTRUCTLISTFIELD, new FieldMetaData("optionalStructListField", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Foo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Bar.class, metaDataMap);
  }

  public Bar() {
  }

  public Bar(
      Foo structField,
      List<Foo> structListField) {
    this();
    this.structField = structField;
    this.structListField = structListField;
  }

  public Bar(
      Foo structField,
      Foo optionalStructField,
      List<Foo> structListField,
      List<Foo> optionalStructListField) {
    this();
    this.structField = structField;
    this.optionalStructField = optionalStructField;
    this.structListField = structListField;
    this.optionalStructListField = optionalStructListField;
  }

  public static class Builder {
    private Foo structField;
    private Foo optionalStructField;
    private List<Foo> structListField;
    private List<Foo> optionalStructListField;

    public Builder() {
    }

    public Builder setStructField(final Foo structField) {
      this.structField = structField;
      return this;
    }

    public Builder setOptionalStructField(final Foo optionalStructField) {
      this.optionalStructField = optionalStructField;
      return this;
    }

    public Builder setStructListField(final List<Foo> structListField) {
      this.structListField = structListField;
      return this;
    }

    public Builder setOptionalStructListField(final List<Foo> optionalStructListField) {
      this.optionalStructListField = optionalStructListField;
      return this;
    }

    public Bar build() {
      Bar result = new Bar();
      result.setStructField(this.structField);
      result.setOptionalStructField(this.optionalStructField);
      result.setStructListField(this.structListField);
      result.setOptionalStructListField(this.optionalStructListField);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Bar(Bar other) {
    if (other.isSetStructField()) {
      this.structField = TBaseHelper.deepCopy(other.structField);
    }
    if (other.isSetOptionalStructField()) {
      this.optionalStructField = TBaseHelper.deepCopy(other.optionalStructField);
    }
    if (other.isSetStructListField()) {
      this.structListField = TBaseHelper.deepCopy(other.structListField);
    }
    if (other.isSetOptionalStructListField()) {
      this.optionalStructListField = TBaseHelper.deepCopy(other.optionalStructListField);
    }
  }

  public Bar deepCopy() {
    return new Bar(this);
  }

  public Foo getStructField() {
    return this.structField;
  }

  public Bar setStructField(Foo structField) {
    this.structField = structField;
    return this;
  }

  public void unsetStructField() {
    this.structField = null;
  }

  // Returns true if field structField is set (has been assigned a value) and false otherwise
  public boolean isSetStructField() {
    return this.structField != null;
  }

  public void setStructFieldIsSet(boolean __value) {
    if (!__value) {
      this.structField = null;
    }
  }

  public Foo getOptionalStructField() {
    return this.optionalStructField;
  }

  public Bar setOptionalStructField(Foo optionalStructField) {
    this.optionalStructField = optionalStructField;
    return this;
  }

  public void unsetOptionalStructField() {
    this.optionalStructField = null;
  }

  // Returns true if field optionalStructField is set (has been assigned a value) and false otherwise
  public boolean isSetOptionalStructField() {
    return this.optionalStructField != null;
  }

  public void setOptionalStructFieldIsSet(boolean __value) {
    if (!__value) {
      this.optionalStructField = null;
    }
  }

  public List<Foo> getStructListField() {
    return this.structListField;
  }

  public Bar setStructListField(List<Foo> structListField) {
    this.structListField = structListField;
    return this;
  }

  public void unsetStructListField() {
    this.structListField = null;
  }

  // Returns true if field structListField is set (has been assigned a value) and false otherwise
  public boolean isSetStructListField() {
    return this.structListField != null;
  }

  public void setStructListFieldIsSet(boolean __value) {
    if (!__value) {
      this.structListField = null;
    }
  }

  public List<Foo> getOptionalStructListField() {
    return this.optionalStructListField;
  }

  public Bar setOptionalStructListField(List<Foo> optionalStructListField) {
    this.optionalStructListField = optionalStructListField;
    return this;
  }

  public void unsetOptionalStructListField() {
    this.optionalStructListField = null;
  }

  // Returns true if field optionalStructListField is set (has been assigned a value) and false otherwise
  public boolean isSetOptionalStructListField() {
    return this.optionalStructListField != null;
  }

  public void setOptionalStructListFieldIsSet(boolean __value) {
    if (!__value) {
      this.optionalStructListField = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case STRUCTFIELD:
      if (__value == null) {
        unsetStructField();
      } else {
        setStructField((Foo)__value);
      }
      break;

    case OPTIONALSTRUCTFIELD:
      if (__value == null) {
        unsetOptionalStructField();
      } else {
        setOptionalStructField((Foo)__value);
      }
      break;

    case STRUCTLISTFIELD:
      if (__value == null) {
        unsetStructListField();
      } else {
        setStructListField((List<Foo>)__value);
      }
      break;

    case OPTIONALSTRUCTLISTFIELD:
      if (__value == null) {
        unsetOptionalStructListField();
      } else {
        setOptionalStructListField((List<Foo>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case STRUCTFIELD:
      return getStructField();

    case OPTIONALSTRUCTFIELD:
      return getOptionalStructField();

    case STRUCTLISTFIELD:
      return getStructListField();

    case OPTIONALSTRUCTLISTFIELD:
      return getOptionalStructListField();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof Bar))
      return false;
    Bar that = (Bar)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetStructField(), that.isSetStructField(), this.structField, that.structField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptionalStructField(), that.isSetOptionalStructField(), this.optionalStructField, that.optionalStructField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStructListField(), that.isSetStructListField(), this.structListField, that.structListField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptionalStructListField(), that.isSetOptionalStructListField(), this.optionalStructListField, that.optionalStructListField)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {structField, optionalStructField, structListField, optionalStructListField});
  }

  @Override
  public int compareTo(Bar other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStructField()).compareTo(other.isSetStructField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(structField, other.structField);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOptionalStructField()).compareTo(other.isSetOptionalStructField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(optionalStructField, other.optionalStructField);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStructListField()).compareTo(other.isSetStructListField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(structListField, other.structListField);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOptionalStructListField()).compareTo(other.isSetOptionalStructListField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(optionalStructListField, other.optionalStructListField);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case STRUCTFIELD:
          if (__field.type == TType.STRUCT) {
            this.structField = new Foo();
            this.structField.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTIONALSTRUCTFIELD:
          if (__field.type == TType.STRUCT) {
            this.optionalStructField = new Foo();
            this.optionalStructField.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRUCTLISTFIELD:
          if (__field.type == TType.LIST) {
            {
              TList _list26 = iprot.readListBegin();
              this.structListField = new ArrayList<Foo>(Math.max(0, _list26.size));
              for (int _i27 = 0; 
                   (_list26.size < 0) ? iprot.peekList() : (_i27 < _list26.size); 
                   ++_i27)
              {
                Foo _elem28;
                _elem28 = new Foo();
                _elem28.read(iprot);
                this.structListField.add(_elem28);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTIONALSTRUCTLISTFIELD:
          if (__field.type == TType.LIST) {
            {
              TList _list29 = iprot.readListBegin();
              this.optionalStructListField = new ArrayList<Foo>(Math.max(0, _list29.size));
              for (int _i30 = 0; 
                   (_list29.size < 0) ? iprot.peekList() : (_i30 < _list29.size); 
                   ++_i30)
              {
                Foo _elem31;
                _elem31 = new Foo();
                _elem31.read(iprot);
                this.optionalStructListField.add(_elem31);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.structField != null) {
      oprot.writeFieldBegin(STRUCT_FIELD_FIELD_DESC);
      this.structField.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.optionalStructField != null) {
      if (isSetOptionalStructField()) {
        oprot.writeFieldBegin(OPTIONAL_STRUCT_FIELD_FIELD_DESC);
        this.optionalStructField.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.structListField != null) {
      oprot.writeFieldBegin(STRUCT_LIST_FIELD_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.structListField.size()));
        for (Foo _iter32 : this.structListField)        {
          _iter32.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.optionalStructListField != null) {
      if (isSetOptionalStructListField()) {
        oprot.writeFieldBegin(OPTIONAL_STRUCT_LIST_FIELD_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.optionalStructListField.size()));
          for (Foo _iter33 : this.optionalStructListField)          {
            _iter33.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Bar");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("structField");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStructField() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getStructField(), indent + 1, prettyPrint));
    }
    first = false;
    if (isSetOptionalStructField())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("optionalStructField");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getOptionalStructField() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getOptionalStructField(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("structListField");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStructListField() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getStructListField(), indent + 1, prettyPrint));
    }
    first = false;
    if (isSetOptionalStructListField())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("optionalStructListField");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getOptionalStructListField() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getOptionalStructListField(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

