/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once
#include <src/gen-cpp2/MyRoot.h>
#include <src/gen-cpp2/MyNode.h>
#include <src/gen-cpp2/MyLeaf.h>
#include <folly/python/futures.h>
#include <Python.h>

#include <memory>

namespace cpp2 {

class MyRootWrapper : virtual public MyRootSvIf {
  protected:
    PyObject *if_object;
    folly::Executor *executor;
  public:
    explicit MyRootWrapper(PyObject *if_object, folly::Executor *exc);
    void async_tm_do_root(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback) override;
};

std::shared_ptr<apache::thrift::ServerInterface> MyRootInterface(PyObject *if_object, folly::Executor *exc);


class MyNodeWrapper : public ::cpp2::MyRootWrapper, virtual public MyNodeSvIf {
  public:
    explicit MyNodeWrapper(PyObject *if_object, folly::Executor *exc);
    void async_tm_do_mid(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback) override;
};

std::shared_ptr<apache::thrift::ServerInterface> MyNodeInterface(PyObject *if_object, folly::Executor *exc);


class MyLeafWrapper : public ::cpp2::MyNodeWrapper, virtual public MyLeafSvIf {
  public:
    explicit MyLeafWrapper(PyObject *if_object, folly::Executor *exc);
    void async_tm_do_leaf(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback) override;
};

std::shared_ptr<apache::thrift::ServerInterface> MyLeafInterface(PyObject *if_object, folly::Executor *exc);
} // namespace cpp2
