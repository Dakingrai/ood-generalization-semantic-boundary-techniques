/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class SinkException2 extends Exception implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SinkException2");
  private static final TField REASON_FIELD_DESC = new TField("reason", TType.I64, (short)1);

  public long reason;
  public static final int REASON = 1;

  // isset id assignments
  private static final int __REASON_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(REASON, new FieldMetaData("reason", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(SinkException2.class, metaDataMap);
  }

  public SinkException2() {
  }

  public SinkException2(
      long reason) {
    this();
    this.reason = reason;
    setReasonIsSet(true);
  }

  public static class Builder {
    private long reason;

    BitSet __optional_isset = new BitSet(1);

    public Builder() {
    }

    public Builder setReason(final long reason) {
      this.reason = reason;
      __optional_isset.set(__REASON_ISSET_ID, true);
      return this;
    }

    public SinkException2 build() {
      SinkException2 result = new SinkException2();
      if (__optional_isset.get(__REASON_ISSET_ID)) {
        result.setReason(this.reason);
      }
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SinkException2(SinkException2 other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.reason = TBaseHelper.deepCopy(other.reason);
  }

  public SinkException2 deepCopy() {
    return new SinkException2(this);
  }

  public long getReason() {
    return this.reason;
  }

  public SinkException2 setReason(long reason) {
    this.reason = reason;
    setReasonIsSet(true);
    return this;
  }

  public void unsetReason() {
    __isset_bit_vector.clear(__REASON_ISSET_ID);
  }

  // Returns true if field reason is set (has been assigned a value) and false otherwise
  public boolean isSetReason() {
    return __isset_bit_vector.get(__REASON_ISSET_ID);
  }

  public void setReasonIsSet(boolean __value) {
    __isset_bit_vector.set(__REASON_ISSET_ID, __value);
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case REASON:
      if (__value == null) {
        unsetReason();
      } else {
        setReason((Long)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case REASON:
      return new Long(getReason());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof SinkException2))
      return false;
    SinkException2 that = (SinkException2)_that;

    if (!TBaseHelper.equalsNobinary(this.reason, that.reason)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {reason});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case REASON:
          if (__field.type == TType.I64) {
            this.reason = iprot.readI64();
            setReasonIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(REASON_FIELD_DESC);
    oprot.writeI64(this.reason);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("SinkException2");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("reason");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getReason(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

