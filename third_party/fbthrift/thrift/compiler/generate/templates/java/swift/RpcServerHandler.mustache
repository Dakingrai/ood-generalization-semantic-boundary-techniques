{{!

  Copyright (c) Facebook, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}
{{> AutoGenerated}}

package {{service:javaPackage}};

import java.util.*;
import org.apache.thrift.protocol.*;

public class {{service:javaCapitalName}}RpcServerHandler {{#service:extends}} extends {{service:javaPackage}}.{{service:javaCapitalName}}RpcServerHandler{{/service:extends}}
  implements com.facebook.swift.transport.server.RpcServerHandler {

  private final java.util.Map<String, com.facebook.swift.transport.server.RpcServerHandler> _methodMap;

  private final {{service:javaCapitalName}}.Reactive _delegate;

  {{#service:supportedFunctions}}
  private final java.util.List<com.facebook.swift.transport.payload.Reader> _{{function:javaName}}Readers;
  {{/service:supportedFunctions}}

  private final java.util.List<com.facebook.swift.service.ThriftEventHandler> _eventHandlers;

  public {{service:javaCapitalName}}RpcServerHandler({{service:javaCapitalName}} _delegate,
                                    java.util.List<com.facebook.swift.service.ThriftEventHandler> _eventHandlers,
                                    reactor.core.scheduler.Scheduler _scheduler) {
    this(new {{service:javaCapitalName}}BlockingReactiveWrapper(_delegate, _scheduler), _eventHandlers);
  }

  public {{service:javaCapitalName}}RpcServerHandler({{service:javaCapitalName}}.Async _delegate,
                                    java.util.List<com.facebook.swift.service.ThriftEventHandler> _eventHandlers) {
    this(new {{service:javaCapitalName}}AsyncReactiveWrapper(_delegate), _eventHandlers);
  }

  public {{service:javaCapitalName}}RpcServerHandler({{service:javaCapitalName}}.Reactive _delegate,
                                    java.util.List<com.facebook.swift.service.ThriftEventHandler> _eventHandlers) {
    {{#service:extends}}super(_delegate, _eventHandlers);{{/service:extends}}
    this._methodMap = new java.util.HashMap<>();
    this._delegate = _delegate;
    this._eventHandlers = _eventHandlers;

    {{#service:supportedFunctions}}
    _methodMap.put("{{function:javaName}}", this);
    _{{function:javaName}}Readers = _create{{function:javaName}}Readers();

    {{/service:supportedFunctions}}
  }

  {{#service:supportedFunctions}}
  private static java.util.List<com.facebook.swift.transport.payload.Reader> _create{{function:javaName}}Readers() {
    java.util.List<com.facebook.swift.transport.payload.Reader> _readerList = new java.util.ArrayList<>();

    {{#function:args}}
    {{function:unsetIsNested}}
    _readerList.add(oprot -> {
      try {
        {{#field:type}}
        {{> ReadReturnType }}

        return _r;

        {{/field:type}}
      } catch (Throwable _e) {
        throw reactor.core.Exceptions.propagate(_e);
      }
    });
    {{/function:args}}

    return _readerList;
  }

  private static com.facebook.swift.transport.payload.Writer _create{{function:javaName}}Writer(
      final Object _r,
      final com.facebook.swift.service.ContextChain _chain,
      final int _seqId) {
      return oprot -> {
      try {
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("{{function:javaName}}", TMessageType.REPLY, _seqId));
        oprot.writeStructBegin(com.facebook.swift.transport.util.GeneratedUtil.TSTRUCT);

        {{function:unsetIsNested}}
        {{^function:voidType}}
        {{#function:return_type}}
        {{> Type}} _iter0 = ({{> Type}})_r;
        {{function:nestedDepth++}}{{> WriteResponseType}}{{function:nestedDepth--}}
        {{/function:return_type}}
        {{/function:voidType}}

        {{#function:voidType}}
        oprot.writeFieldBegin(com.facebook.swift.transport.util.GeneratedUtil.VOID_FIELD);
        {{/function:voidType}}


        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
        oprot.writeMessageEnd();

        _chain.postWrite(_r);
      } catch (Throwable _e) {
        throw reactor.core.Exceptions.propagate(_e);
      }
    };
  }

  private static reactor.core.publisher.Mono<com.facebook.swift.transport.payload.ServerResponsePayload>
    _do{{function:javaName}}(
    {{service:javaCapitalName}}.Reactive _delegate,
    String _name,
    com.facebook.swift.transport.payload.ServerRequestPayload _payload,
    java.util.List<com.facebook.swift.transport.payload.Reader> _readers,
    java.util.List<com.facebook.swift.service.ThriftEventHandler> _eventHandlers) {
    final com.facebook.swift.service.ContextChain _chain = new com.facebook.swift.service.ContextChain(_eventHandlers, _name, _payload.getRequestContext());
          _chain.preRead();
          java.util.List<Object>_data = _payload.getData(_readers);
          java.util.Iterator<Object> _iterator = _data.iterator();

          {{#function:args}}
          {{#field:type}}{{> Type}}{{/field:type}} {{field:javaName}} = ({{#field:type}}{{> Type}}{{/field:type}}) _iterator.next();
          {{/function:args}}

          _chain.postRead(_data);

          return _delegate
            .{{function:javaName}}({{#function:args}}{{field:javaName}}{{^last?}}, {{/last?}}{{/function:args}})
            .map(_response -> {
              _chain.preWrite(_response);
                com.facebook.swift.transport.payload.ServerResponsePayload _serverResponsePayload =
                    com.facebook.swift.transport.util.GeneratedUtil.createServerResponsePayload(
                        _payload,
                        _create{{function:javaName}}Writer(_response, _chain, _payload.getMessageSeqId()));

                return _serverResponsePayload;
            })
            .<com.facebook.swift.transport.payload.ServerResponsePayload>onErrorResume(_t -> {
                _chain.preWriteException(_t);
                com.facebook.swift.transport.payload.Writer _exceptionWriter = null;

                com.facebook.swift.transport.payload.ServerResponsePayload _serverResponsePayload =
                    com.facebook.swift.transport.util.GeneratedUtil.createServerResponsePayload(
                        _payload,
                        _exceptionWriter);

                return reactor.core.publisher.Mono.just(_serverResponsePayload);
            });
  }
  {{/service:supportedFunctions}}

  @Override
  public reactor.core.publisher.Mono<com.facebook.swift.transport.payload.ServerResponsePayload> singleRequestSingleResponse(com.facebook.swift.transport.payload.ServerRequestPayload _payload) {
    final String _name = _payload.getRequestRpcMetadata().getName();

    reactor.core.publisher.Mono<com.facebook.swift.transport.payload.ServerResponsePayload> _result;
    try {
      switch (_name) {
        {{#service:supportedFunctions}}
        case "{{function:javaName}}":
          _result = _do{{function:javaName}}(_delegate, _name, _payload, _{{function:javaName}}Readers, _eventHandlers);
        break;
        {{/service:supportedFunctions}}
        default: {
          {{#service:extends}}
          _result =  super.singleRequestSingleResponse(_payload);
          {{/service:extends}}
          {{^service:extends}}
          _result = reactor.core.publisher.Mono.error(new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.UNKNOWN_METHOD, "no method found with name " + _name));
          {{/service:extends}}
        }
      }
    } catch (Throwable _t) {
      _result = reactor.core.publisher.Mono.error(_t);
    }

    return _result;
  }

  public java.util.Map<String, com.facebook.swift.transport.server.RpcServerHandler> getMethodMap() {
    {{#service:extends}}
      java.util.Map<String, com.facebook.swift.transport.server.RpcServerHandler> _combined = new java.util.HashMap();
      _combined.putAll(_methodMap);
      _combined.putAll(super.getMethodMap());
      return _combined;
    {{/service:extends}}
    {{^service:extends}}
      return _methodMap;
    {{/service:extends}}
  }

}
