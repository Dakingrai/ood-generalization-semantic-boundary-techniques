<%!

  Copyright (c) Facebook, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

%><%#service:functions%><%#function:return_type%>
<%^function:starts_interaction?%>
<%^function:eb%>
<%^service:interaction?%>

<% > service_common/function_return_type%> <%service:name%>SvIf::<%function:cpp_name%>(<% > service_common/function_return_param%><% > service_common/function_param_list_commented_out%>) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("<%function:name%>");
}

folly::SemiFuture<<% > service_common/async_return_type%>> <% > service_common/service_class_name%>::semifuture_<%function:cpp_name%>(<% > service_common/function_param_list%>) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_<%function:cpp_name%>.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Sync, std::memory_order_relaxed);
<%^type:resolves_to_complex_return?%>
  return apache::thrift::detail::si::semifuture([&] {
    return <%function:cpp_name%>(<% > service_common/param_list_move%>);
  });
<%/type:resolves_to_complex_return?%>
<%#type:resolves_to_complex_return?%>
  return apache::thrift::detail::si::semifuture_returning<%^function:stack_arguments?%>_uptr<%/function:stack_arguments?%>([&](<%type:cpp_type%>& _return) { <%function:cpp_name%>(_return<%function:comma%><% > service_common/param_list_move%>); });
<%/type:resolves_to_complex_return?%>
}

folly::Future<<% > service_common/async_return_type%>> <%service:name%>SvIf::future_<%function:cpp_name%>(<% > service_common/function_param_list%>) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_<%function:cpp_name%>.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::SemiFuture, std::memory_order_relaxed);
  auto ka = getThreadManager()->getKeepAlive(getRequestContext()->getRequestExecutionScope(), apache::thrift::concurrency::ThreadManager::Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_<%function:cpp_name%>(<% > service_common/param_list_move%>), std::move(ka));
}
<%/service:interaction?%>
<%#service:interaction?%>

folly::SemiFuture<<% > service_common/async_return_type%>> <% > service_common/service_class_name%>::semifuture_<%function:cpp_name%>(<% > service_common/function_param_list_commented_out%>) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("semifuture_<%function:name%>");
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<<% > service_common/callback_type%>> <% > service_common/service_class_name%>::co_<%function:cpp_name%>(<% > service_common/function_param_list%>) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_<%function:cpp_name%>.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::<%^service:interaction?%>Future<%/service:interaction?%><%#service:interaction?%>SemiFuture<%/service:interaction?%>, std::memory_order_relaxed);
  return folly::coro::toTask(<%^service:interaction?%>future_<%/service:interaction?%><%#service:interaction?%>semifuture_<%/service:interaction?%><%function:cpp_name%>(<% > service_common/param_list_move%>));
}

folly::coro::Task<<% > service_common/callback_type%>> <% > service_common/service_class_name%>::co_<%function:cpp_name%>(apache::thrift::RequestParams /* params */<%function:comma%><% > service_common/function_param_list%>) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_<%function:cpp_name%>.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Coro, std::memory_order_relaxed);
  return co_<%function:cpp_name%>(<% > service_common/param_list_move%>);
}
#endif // FOLLY_HAS_COROUTINES
<%/service:interaction?%>
<%^service:interaction?%>
<%#function:coroutine?%><%!The following block is duplicated from the service:interaction case, we can remove it once function:coroutine is retired%>

#if FOLLY_HAS_COROUTINES
folly::coro::Task<<% > service_common/callback_type%>> <% > service_common/service_class_name%>::co_<%function:cpp_name%>(<% > service_common/function_param_list%>) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_<%function:cpp_name%>.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::<%^service:interaction?%>Future<%/service:interaction?%><%#service:interaction?%>SemiFuture<%/service:interaction?%>, std::memory_order_relaxed);
  return folly::coro::toTask(<%^service:interaction?%>future_<%/service:interaction?%><%#service:interaction?%>semifuture_<%/service:interaction?%><%function:cpp_name%>(<% > service_common/param_list_move%>));
}

folly::coro::Task<<% > service_common/callback_type%>> <% > service_common/service_class_name%>::co_<%function:cpp_name%>(apache::thrift::RequestParams /* params */<%function:comma%><% > service_common/function_param_list%>) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_<%function:cpp_name%>.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Coro, std::memory_order_relaxed);
  return co_<%function:cpp_name%>(<% > service_common/param_list_move%>);
}
#endif // FOLLY_HAS_COROUTINES
<%/function:coroutine?%>
<%/service:interaction?%>
<%#function:oneway?%>

void <% > service_common/service_class_name%>::async_tm_<%function:cpp_name%>(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback<%function:comma%><% > service_common/function_param_list%>) {
<%/function:oneway?%>
<%^function:oneway?%>

void <% > service_common/service_class_name%>::async_tm_<%function:cpp_name%>(std::unique_ptr<apache::thrift::HandlerCallback<<% > types/unique_ptr_type%>>> callback<%function:comma%><% > service_common/function_param_list%>) {
<%/function:oneway?%>
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we set that up
  // for all cases.
  apache::thrift::detail::si::async_tm_prep(this, callback.get());
  switch (__fbthrift_invocation_<%function:cpp_name%>.load(std::memory_order_relaxed)) {
    case apache::thrift::detail::si::InvocationType::AsyncTm:
    {
<%^function:coroutine?%>
      auto expected{apache::thrift::detail::si::InvocationType::AsyncTm};
      __fbthrift_invocation_<%function:cpp_name%>.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Future, std::memory_order_relaxed);
      apache::thrift::detail::si::<%#function:oneway?%>async_tm_future_oneway<%/function:oneway?%><%^function:oneway?%>async_tm_future<%/function:oneway?%>(std::move(callback), [&] {
        return future_<%function:cpp_name%>(<% > service_common/param_list_move%>);
      });
<%/function:coroutine?%>
<%#function:coroutine?%>
#if FOLLY_HAS_COROUTINES
      auto expected{apache::thrift::detail::si::InvocationType::AsyncTm};
      __fbthrift_invocation_<%function:cpp_name%>.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::CoroParam, std::memory_order_relaxed);
      apache::thrift::RequestParams params{callback->getRequestContext(),
        callback->getThreadManager(), callback->getEventBase()};
      try {
        apache::thrift::detail::si::<%#function:oneway?%>async_tm_coro_oneway<%/function:oneway?%><%^function:oneway?%>async_tm_coro<%/function:oneway?%>(
          co_<%function:cpp_name%>(params<%function:comma%><% > service_common/param_list_move%>),
          std::move(callback));
      } catch (...) {
        callback->exception(std::current_exception());
      }
#else // FOLLY_HAS_COROUTINES
<%^service:interaction?%>
      auto expected{apache::thrift::detail::si::InvocationType::AsyncTm};
      __fbthrift_invocation_<%function:cpp_name%>.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Future, std::memory_order_relaxed);
      apache::thrift::detail::si::<%#function:oneway?%>async_tm_future_oneway<%/function:oneway?%><%^function:oneway?%>async_tm_future<%/function:oneway?%>(std::move(callback), [&] {
        return future_<%function:cpp_name%>(<% > service_common/param_list_move%>);
      });
<%/service:interaction?%>
<%#service:interaction?%>
      auto expected{apache::thrift::detail::si::InvocationType::AsyncTm};
      __fbthrift_invocation_<%function:cpp_name%>.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::SemiFuture, std::memory_order_relaxed);
      apache::thrift::detail::si::<%#function:oneway?%>async_tm_semifuture_oneway<%/function:oneway?%><%^function:oneway?%>async_tm_semifuture<%/function:oneway?%>(std::move(callback), [&] {
        return semifuture_<%function:cpp_name%>(<% > service_common/param_list_move%>);
      });
<%/service:interaction?%>
#endif // FOLLY_HAS_COROUTINES
<%/function:coroutine?%>
      return;
    }
    case apache::thrift::detail::si::InvocationType::SemiFuture:
    {
      apache::thrift::detail::si::<%#function:oneway?%>async_tm_semifuture_oneway<%/function:oneway?%><%^function:oneway?%>async_tm_semifuture<%/function:oneway?%>(std::move(callback), [&] {
        return semifuture_<%function:cpp_name%>(<% > service_common/param_list_move%>); });
      return;
    }
<%#function:coroutine?%>
#if FOLLY_HAS_COROUTINES
    case apache::thrift::detail::si::InvocationType::CoroParam:
    {
      apache::thrift::RequestParams params{callback->getRequestContext(),
        callback->getThreadManager(), callback->getEventBase()};
      try {
        apache::thrift::detail::si::<%#function:oneway?%>async_tm_coro_oneway<%/function:oneway?%><%^function:oneway?%>async_tm_coro<%/function:oneway?%>(
          co_<%function:cpp_name%>(params<%function:comma%><% > service_common/param_list_move%>),
          std::move(callback));
      } catch (...) {
        callback->exception(std::current_exception());
      }
      return;
    }
    case apache::thrift::detail::si::InvocationType::Coro:
    {
      try {
        apache::thrift::detail::si::<%#function:oneway?%>async_tm_coro_oneway<%/function:oneway?%><%^function:oneway?%>async_tm_coro<%/function:oneway?%>(
          co_<%function:cpp_name%>(<% > service_common/param_list_move%>),
          std::move(callback));
      } catch (...) {
        callback->exception(std::current_exception());
      }
      return;
    }
#endif // FOLLY_HAS_COROUTINES
<%/function:coroutine?%>
<%^service:interaction?%>
    case apache::thrift::detail::si::InvocationType::Sync:
    {
      try {
<%^type:resolves_to_complex_return?%>
<%^type:void?%>
        callback->result(<%function:cpp_name%>(<% > service_common/param_list_move%>));
<%/type:void?%>
<%#type:void?%>
        <%function:cpp_name%>(<% > service_common/param_list_move%>);
<%^function:oneway?%>
        callback->done();
<%/function:oneway?%>
<%/type:void?%>
<%/type:resolves_to_complex_return?%>
<%#type:resolves_to_complex_return?%>
        <% > types/type%> _return;
        <%function:cpp_name%>(_return<%function:comma%><% > service_common/param_list_move%>);
        callback->result(_return);
<%/type:resolves_to_complex_return?%>
      } catch (...) {
        callback->exception(std::current_exception());
      }
      return;
    }
    case apache::thrift::detail::si::InvocationType::Future:
    {
      apache::thrift::detail::si::<%#function:oneway?%>async_tm_future_oneway<%/function:oneway?%><%^function:oneway?%>async_tm_future<%/function:oneway?%>(std::move(callback), [&] {
        return future_<%function:cpp_name%>(<% > service_common/param_list_move%>);
      });
      return;
    }
<%/service:interaction?%>
    default:
    {
      folly::assume_unreachable();
    }
  }
}
<%/function:eb%>
<%#function:eb%><%!Event base codegen%>
<%#function:oneway?%>

void <% > service_common/service_class_name%>::async_eb_<%function:cpp_name%>(std::unique_ptr<apache::thrift::HandlerCallbackBase> /*callback*/<%function:comma%><% > service_common/function_param_list_commented_out%>) {
  LOG(DFATAL) << "Function <%function:cpp_name%> is unimplemented";
}
<%/function:oneway?%>
<%^function:oneway?%>

void <% > service_common/service_class_name%>::async_eb_<%function:cpp_name%>(std::unique_ptr<apache::thrift::HandlerCallback<<% > types/unique_ptr_type%>>> callback<%function:comma%><% > service_common/function_param_list_commented_out%>) {
  callback->exception(apache::thrift::TApplicationException("Function <%function:cpp_name%> is unimplemented"));
}
<%/function:oneway?%>
<%/function:eb%>
<%/function:starts_interaction?%>
<%/function:return_type%><%/service:functions%>
